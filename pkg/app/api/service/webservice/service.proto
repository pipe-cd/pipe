// Copyright 2020 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pipe.api.service.webservice;
option go_package = "github.com/pipe-cd/pipe/pkg/app/api/service/webservice";

import "validate/validate.proto";
import "pkg/model/common.proto";
import "pkg/model/application.proto";
import "pkg/model/application_live_state.proto";
import "pkg/model/environment.proto";
import "pkg/model/deployment.proto";
import "pkg/model/logblock.proto";
import "pkg/model/piped.proto";

// Note: Does copy Piped message from pkg/model/piped.proto and exclude sensitive data because Piped message for web should not contain it.
message Piped {
    // The generated unique identifier.
    string id = 1 [(validate.rules).string.min_len = 1];
    // The additional description about the piped.
    string desc = 2;
    // The ID of the project this environment belongs to.
    string project_id = 3 [(validate.rules).string.min_len = 1];

    // Currently running version.
    string version = 7;
    // Unix time when the piped is started up.
    int64 started_at = 8;
    // List of configured cloud providers.
    repeated pipe.model.Piped.CloudProvider cloud_providers = 9;
    // List of configured repository IDs.
    repeated string repository_ids = 10;

    // Whether the piped is disabled or not.
    bool disabled = 13;
    // Unix time when the piped is created.
    int64 created_at = 14 [(validate.rules).int64.gt = 0];
    // Unix time of the last time when the piped is updated.
    int64 updated_at = 15 [(validate.rules).int64.gt = 0];
}

enum PipedConnectionStatus {
    PIPED_CONNECTION_ONLINE = 0;
    PIPED_CONNECTION_OFFLINE = 1;
}

// OmittedPiped is the minimal message for listing on the web application.
message OmittedPiped {
    string id = 1;
    string desc = 2;
    PipedConnectionStatus status = 3 [(validate.rules).enum.defined_only = true];

    bool disabled = 13;
    int64 created_at = 14 [(validate.rules).int64.gt = 0];
    int64 updated_at = 15 [(validate.rules).int64.gt = 0];
}

// WebService contains all RPC definitions for web client.
// All of these RPCs are only called by web client and authenticated by using ID_TOKEN.
service WebService {
    // Environment
    rpc AddEnvironment(AddEnvironmentRequest) returns (AddEnvironmentResponse) {}
    rpc UpdateEnvironmentDesc(UpdateEnvironmentDescRequest) returns (UpdateEnvironmentDescResponse) {}
    rpc ListEnvironments(ListEnvironmentsRequest) returns (ListEnvironmentsResponse) {}

    // Piped
    rpc RegisterPiped(RegisterPipedRequest) returns (RegisterPipedResponse) {}
    rpc DisablePiped(DisablePipedRequest) returns (DisablePipedResponse) {}
    rpc ListPipeds(ListPipedsRequest) returns (ListPipedsResponse) {}
    rpc GetPiped(GetPipedRequest) returns (GetPipedResponse) {}

    // Application
    rpc AddApplication(AddApplicationRequest) returns (AddApplicationResponse) {}
    rpc DisableApplication(DisableApplicationRequest) returns (DisableApplicationResponse) {}
    rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse) {}
    rpc SyncApplication(SyncApplicationRequest) returns (SyncApplicationResponse) {}
    rpc GetApplication(GetApplicationRequest) returns (GetApplicationResponse) {}

    // Deployment
    rpc ListDeployments(ListDeploymentsRequest) returns (ListDeploymentsResponse) {}
    rpc GetDeployment(GetDeploymentRequest) returns (GetDeploymentResponse) {}
    rpc GetStageLog(GetStageLogRequest) returns (GetStageLogResponse) {}
    rpc CancelDeployment(CancelDeploymentRequest) returns (CancelDeploymentResponse) {}
    rpc ApproveStage(ApproveStageRequest) returns (ApproveStageResponse) {}

    // ApplicationLiveState
    rpc GetApplicationLiveState(GetApplicationLiveStateRequest) returns (GetApplicationLiveStateResponse) {}
    
    // Account
    rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {}
    rpc GetMe(GetMeRequest) returns (GetMeResponse) {}
}

message AddEnvironmentResponse {
}

message UpdateEnvironmentDescRequest {
}

message UpdateEnvironmentDescResponse {
}

message ListEnvironmentsRequest {
}

message ListEnvironmentsResponse {
    repeated pipe.model.Environment environments = 1;
}

message RegisterPipedRequest {
    string desc = 1;
}

message RegisterPipedResponse {
    string id = 1;
    string key = 2;
}

message DisablePipedRequest {
}

message DisablePipedResponse {
}

message ListPipedsRequest {
    // Whether to include the status value in the response message.
    bool withStatus = 1;
}

message ListPipedsResponse {
    repeated OmittedPiped pipeds = 1;
}

message GetPipedRequest {
    string piped_id = 1 [(validate.rules).string.min_len = 1];
}

message GetPipedResponse {
    Piped piped = 1;
}

message AddEnvironmentRequest {
    string name = 1 [(validate.rules).string.min_len = 1];
    string desc = 2;
}

message AddApplicationRequest {
    string name = 1 [(validate.rules).string.min_len = 1];
    string env_id = 2 [(validate.rules).string.min_len = 1];
    string piped_id = 3 [(validate.rules).string.min_len = 1];
    model.ApplicationGitPath git_path = 4 [(validate.rules).message.required = true];
    model.ApplicationKind kind = 5 [(validate.rules).enum.defined_only = true];
    string cloud_provider = 6 [(validate.rules).string.min_len = 1];
}

message AddApplicationResponse {
}

message DisableApplicationRequest {
}

message DisableApplicationResponse {
}

message ListApplicationsRequest {
}

message ListApplicationsResponse {
    repeated pipe.model.Application applications = 1;
}

message SyncApplicationRequest {
}

message SyncApplicationResponse {
}

message GetApplicationRequest {
    string application_id = 1 [(validate.rules).string.min_len = 1];
}

message GetApplicationResponse {
    pipe.model.Application application = 1;
}

message ListDeploymentsRequest {
}

message ListDeploymentsResponse {
    repeated pipe.model.Deployment deployments = 1;
}

message GetDeploymentRequest {
    string deployment_id = 1 [(validate.rules).string.min_len = 1];
}

message GetDeploymentResponse {
    pipe.model.Deployment deployment = 1;
}

message GetStageLogRequest {
    string deployment_id = 1 [(validate.rules).string.min_len = 1];
    string stage_id = 2 [(validate.rules).string.min_len = 1];
    int32 retried_count = 3;
    int64 offset_index = 4;
}

message GetStageLogResponse {
    repeated pipe.model.LogBlock blocks = 1;
    bool completed = 2;
}

message CancelDeploymentRequest {
}

message CancelDeploymentResponse {
}

message ApproveStageRequest {
}

message ApproveStageResponse {
}

message GetApplicationLiveStateRequest {
    string application_id = 1 [(validate.rules).string.min_len = 1];
}

message GetApplicationLiveStateResponse {
    pipe.model.ApplicationLiveStateSnapshot snapshot= 1;
}

message GetProjectRequest {
}

message GetProjectResponse {
}

message GetMeRequest {
}

message GetMeResponse {
}
